// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String         @id @default(uuid())
  email     String         @unique
  password  String
  roles     AccountRoles[]
  clientId  String?        @unique
  client    Client?        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  status    AccountStatus  @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum AccountRoles {
  ADMIN
  USER
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

model Client {
  id           String          @id @default(uuid())
  name         String
  cpf          String          @unique
  birthDate    DateTime
  gender       Gender
  accountId    String?         @unique
  account      Account?
  addresses    ClientAddress[]
  cards        CreditCard[]
  mainCardId   String?         @unique
  mainCard     MainCard?
  carts        Cart[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  TradeRequest TradeRequest[]
  Notification Notification[]
}

enum Gender {
  MALE
  FEMALE
}

model ClientAddress {
  id        String              @id @default(uuid())
  clientId  String?
  client    Client?             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  addressId String?             @unique
  address   Address?
  name      String
  types     ClientAddressType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClientAddressType {
  BILLING
  RESIDENCE
  SHIPPING
}

model Address {
  id              String         @id @default(uuid())
  zipCode         String
  street          String
  streetType      String
  number          String
  residenceType   String
  observation     String
  neighborhood    String
  cityId          String
  city            City           @relation(fields: [cityId], references: [id])
  clientAddressId String?        @unique
  clientAddress   ClientAddress? @relation(fields: [clientAddressId], references: [id], onDelete: Cascade)
  Purchase        Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String    @unique
  stateId   String
  state     State     @relation(fields: [stateId], references: [id])
  addresses Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id     String @id @default(uuid())
  uf     String @unique
  cities City[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCard {
  id           String          @id @default(uuid())
  name         String
  number       String
  cvv          String
  expDate      String
  holderName   String
  brandId      String
  brand        CreditCardBrand @relation(fields: [brandId], references: [id])
  clientId     String?
  client       Client?         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  mainCardId   String?         @unique
  mainCard     MainCard?
  purchaseCard PurchaseCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCardBrand {
  id        String       @id @default(uuid())
  name      String
  cards     CreditCard[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model MainCard {
  id           String     @id @default(uuid())
  creditCardId String     @unique
  creditCard   CreditCard @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  clientId     String     @unique
  client       Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Book {
  id           String          @id @default(uuid())
  name         String
  isbn         String          @unique
  author       String
  year         Int
  publisher    String
  edition      String
  numberPages  Int
  synopsis     String
  height       Float
  width        Float
  weight       Float
  depth        Float
  priceCost    Float
  manufacturer String
  status       BookStatus      @default(ACTIVE)
  categories   BookCategory[]
  stock        BookStock?
  priceGroupId String?
  priceGroup   BookPriceGroup? @relation(fields: [priceGroupId], references: [id], onDelete: SetNull)
  productCart  ProductCart[]

  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  statusReason BookStatusReason[]
}

model BookStatusReason {
  id        String     @id @default(uuid())
  bookId    String
  book      Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  status    BookStatus
  reason    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model BookCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookStock {
  id        String   @id @default(uuid())
  bookId    String   @unique
  book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookPriceGroup {
  id            String   @id @default(uuid())
  name          String   @unique
  profitPercent Float
  books         Book[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum BookStatus {
  ACTIVE
  INACTIVE
}

model ProductCart {
  id     String         @id @default(uuid())
  cartId String
  cart   Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  bookId String
  book   Book           @relation(fields: [bookId], references: [id])
  amount Int
  trades ProductTrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTrade {
  id        String       @id @default(uuid())
  tradeId   String
  trade     TradeRequest @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  product   ProductCart  @relation(fields: [productId], references: [id])
  productId String
  amount    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          String        @id @default(uuid())
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  productCart ProductCart[]
  purchase    Purchase?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id            String         @id @default(uuid())
  cartId        String         @unique
  cart          Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  coupons       Coupon[]
  couponTradeId String?        @unique
  couponTrade   Coupon?        @relation("CouponPurchase")
  totalValue    Float
  totalDiscount Float
  totalShipping Float          @default(0)
  purchasedAt   DateTime
  status        PurchaseStatus
  addressId     String
  address       Address        @relation(fields: [addressId], references: [id])
  cards         PurchaseCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseCard {
  id         String     @id @default(uuid())
  purchaseId String
  purchase   Purchase   @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  cardId     String
  card       CreditCard @relation(fields: [cardId], references: [id])
  percent    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PurchaseStatus {
  EM_PROCESSAMENTO
  PAGAMENTO_REALIZADO
  PEDIDO_CANCELADO
  PAGAMENTO_RECUSADO
  EM_TRANSPORTE
  ENTREGUE
}

model Coupon {
  id             String        @id @default(uuid())
  code           String        @unique
  type           CouponType
  expiresAt      DateTime?
  status         CouponStatus
  value          Float
  purchase       Purchase[]
  tradeId        String?       @unique
  trade          TradeRequest? @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  purchaseId     String?       @unique
  purchaseOrigin Purchase?     @relation(fields: [purchaseId], references: [id], onDelete: Cascade, name: "CouponPurchase")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CouponType {
  PROMOTIONAL
  TRADE
}

enum CouponStatus {
  ACTIVE
  INACTIVE
}

model TradeRequest {
  id             String         @id @default(uuid())
  clientId       String
  client         Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  notificationId String?        @unique
  notification   Notification?
  couponId       String?        @unique
  coupon         Coupon?
  status         TradeStatus
  books          ProductTrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TradeStatus {
  EM_TROCA
  TROCA_AUTORIZADA
  TROCA_RECUSADA
  TROCA_REALIZADA
}

model Notification {
  id       String           @id @default(uuid())
  title    String
  message  String
  type     NotificationType
  read     Boolean          @default(false)
  tradeId  String?          @unique
  trade    TradeRequest?    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  clientId String
  client   Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  TRADE_REQUEST
  RETRIEVE_REQUEST
  PURCHASE
  PURCHASE_CANCEL
  TRADE_COUPON
}
